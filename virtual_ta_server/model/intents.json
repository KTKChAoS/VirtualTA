{
  "intents": [
    {
      "tag": "greeting",
      "patterns": [
        "Hi",
        "Hey",
        "How are you",
        "Is anyone there?",
        "Hello",
        "Good day"  
      ],
      "responses": [
        "Hey :-)",
        "Hello, thanks for visiting",
        "Hi there, what can I do for you?",
        "Hi there, how can I help?"
      ]
    },
    {
      "tag": "SelectionSortTimeComplexity",
      "patterns": [
        "What is the time complexity of the Selection Sort algorithm?",
        "time complexity Selection Sort",
        "Selection Sort complexity time",
        "time complexity of Selection Sort",
        "Big O notation of selection Sort",
        "Big O in selection sort"
      ],
      "responses": [
        "The time complexity of Selection Sort is O(N^2) as there are two nested loops: One loop to select an element of Array one by one = O(N) and Another loop to compare that element with every other Array element = O(N) Therefore overall complexity = O(N) * O(N) = O(N*N) = O(N^2). Time complexity of the Selection Sort algorithm is Best: Ω(n^2) Average: Θ(n^2) Worst: O(n^2)"
      ]
    },
    {
      "tag": "SelectionSortHowDoesWork",
      "patterns": [
        "How does Selection Sort work",
        "Selection Sort explination",
        "explain Selection Sort",
        "define Selection Sort",
        "what is Selection Sort",
        "Selection Sort"
      ],
      "responses": [
        "Selection Sort is a basic sorting algorithm. The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array. The subarray which already sorted. and the remaining subarray was unsorted. In every iteration of the selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray. "
      ]
    },
    {
      "tag": "SelectionSortCompare",
      "patterns": [
        "Compare Selection Sort with other sorts",
        "Selection Sort vs other sorts",
        "difference between Selection sort and other sorts",
        "diff between Selection and other sorts",
        "sorts vs Selection Sort",
        "contrasting sorts and Selection Sort",
        "is selection sort bad",
        "is selection sort good?"
      ],
      "responses": [
        "Selection sort is a simple algorithm that is slow and not fast in comparison to bubble sort. However, it works well with a small list to be sorted and in cases where space is limited. This feature is attributed mainly due to the minimal swaps O(n) requiring very less space. However selection sort will perform identically regardless of the order the array, while Merge or insertion sort's running time can vary considerably. Insertion sort runs much more efficiently if the array is already sorted or close to sorted."
      ]
    },
    {
      "tag": "merge_sort",
      "patterns": [
        "What is the time complexity of the merge sort algorithm?" 
      ],
      "responses": [
        "Time complexity of the merge sort algorithm is O(nlogn)"
      ]
    },
    {
      "tag": "LinearSearchTimeComplexity",
      "patterns": [
        "What is the time complexity of the Linear Search algorithm?",
        "time complexity linear search",
        "linear search complexity time",
        "time complexity of linear search" 
      ],
      "responses": [
        "Time complexity of the Linear Search algorithm is O(n). This is because it is going through the list until it finds the element it is searching for.",
        "Linear Search has a time complexity of O(n). This is because it is going through the list until it finds the element it is searching for."
      ]
    },
    {
      "tag": "LinearSearchHowDoesWork",
      "patterns": [
        "How does linear search work",
        "linear search explination",
        "explain linear search",
        "define linear search",
        "what is linear search"
      ],
      "responses": [
        "Linear Search (Also known as Sequential Search) is a basic search technique where you go through a list and check if an element matches the value you are searching for. It returns the index of the match if there is one."
      ]
    },
    {
      "tag": "LinearSearchCompare",
      "patterns": [
        "Compare linear search with binary search",
        "linear search vs binary search",
        "difference between linear and binary search",
        "diff between linear and binary search",
        "binary vs linear search",
        "contrasting binary search and linear search"
      ],
      "responses": [
        "Linear search does not require data to be sorted while binary search does. Time complexity of linear search is O(n) while binary search has a O(log n). Linear search is simplier to use. Binary search is faster. Linear search can be used in multidimensional arrays."
      ]
    },

    {
      "tag": "BubbleSortTimeComplexity",
      "patterns": [
        "What is the time complexity of the Bubble Sort algorithm?",
        "time complexity Bubble Sort",
        "Bubble Sort complexity time",
        "time complexity of Bubble Sort",
        "Big O of Bubble sort",
        "Bubble sort big O"
      ],
      "responses": [
        "Time complexity of the Bubble Sort algorithm is Best: Ω(n) Average: Θ(n^2) Worst: O(n^2). It contains two loops which is why it is n * n",
        "Bubble Sort has a time complexity of Best: Ω(n) Average: Θ(n^2) Worst: O(n^2). It contains two loops which is why it is n * n"
      ]
    },
    {
      "tag": "BubbleSortHowDoesWork",
      "patterns": [
        "How does Bubble Sort work",
        "Bubble Sort explaination",
        "explain Bubble Sort",
        "define Bubble Sort",
        "what is Bubble Sort"
      ],
      "responses": [
        "Bubble Sort is a basic sorting algorithm. If adjacent elements are in the wrong order then the elements positions are swapped. This sorting algorithm is not recommended for large datasets as its average and worst cases are slow."
      ]
    },
    {
      "tag": "BubbleSortCompare",
      "patterns": [
        "Compare Bubble Sort with other sorts",
        "Bubble Sort vs other sorts",
        "difference between bubble sort and other sorts",
        "diff between bubble and other sorts",
        "sorts vs Bubble Sort",
        "contrasting sorts and Bubble Sort"
      ],
      "responses": [
        "Bubble Sort is a simple sorting techinque and is able to detect if a list is already sorted. It can be faster than other sorts if the list is already sorted."
      ]
    },

    {
      "tag": "BubbleSortTimeComplexity",
      "patterns": [
        "What is the time complexity of the Recursive Bubble Sort algorithm?",
        "time complexity Recursive Bubble Sort",
        "Recursive Bubble Sort complexity time",
        "time complexity of Recursive Bubble Sort" 
      ],
      "responses": [
        "Time complexity of the Recursive Bubble Sort algorithm is O(n * n) == O(n^2). The same function is called recursively for each element in the list. Inside the function it is looping till the length of the list. This makes it n * n which is O(n^2).",
        "Recursive Bubble Sort has a time complexity of O(n * n) == O(n^2).  The same function is called recursively for each element in the list. Inside the function it is looping till the length of the list. This makes it n * n which is O(n^2)."
      ]
    },
    {
      "tag": "BubbleSortHowDoesWork",
      "patterns": [
        "How does Recursive Bubble Sort work",
        "Recursive Bubble Sort explination",
        "explain Recursive Bubble Sort",
        "define Recursive Bubble Sort",
        "what is Recursive Bubble Sort"
      ],
      "responses": [
        "Recursive Bubble Sort is a basic sorting algorithm. If adjacent elements are in the wrong order then the elements positions are swapped. This algorithm will be using recursion which tends to be more difficult to trace compared to iteration."
      ]
    },
    {
      "tag": "BubbleSortCompare",
      "patterns": [
        "Compare Recursive Bubble Sort with other sorts",
        "Recursive Bubble Sort vs other sorts",
        "difference between Recursive Bubble Sort and other sorts",
        "diff between bubble and other sorts",
        "sorts vs Recursive Bubble Sort",
        "contrasting sorts and Recursive Bubble Sort"
      ],
      "responses": [
        "Recursive Bubble Sort is a simple sorting techinque and is able to detect if a list is already sorted. It can be faster than other sorts if the list is already sorted.Recursive bubble sort can be faster than iterative bubble sort even though the math is the same."
      ]
    }

  ]
}
